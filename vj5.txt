MAIN:

#include <stdio.h>
#include <ctype.h>
#include "dictionary.h"

int readWord(FILE *fd, char *buffer)
{
	int c;

	do {
		c = fgetc(fd);
		if(c == EOF)
			return 0;
	} while(!isalpha(c));

	do {
		*buffer = tolower(c);
		buffer++;
		c = fgetc(fd);
		if(c == 146)
			c = '\'';
	} while(isalpha(c) || c == '\'');

	*buffer = '\0';
	return 1;
}

void main()
{
	FILE *fd;
	char buffer[1024];
	Dictionary dict;

	fd = fopen("liar.txt", "rt");
	if(fd == NULL)
	{
		printf("Error opening file.\n");
		return;
	}

	dict = create();
	while(readWord(fd, buffer))
	{
		//printf("%s\n", buffer);
		add(dict, buffer);
	}

	fclose(fd);

	//print(dict);

	destroy(dict);
    //print(dict);
    dict=filterDictionary(dict,filter);
    print(dict);
}


DICTIONARY.H:

#ifndef DICTIONARY_H
#define DICTIONARY_H

typedef struct Word {
	char *word; // rijec
	int count; // broj pojavljivanja rijeci
	struct Word *next;
} Word;

typedef Word* Dictionary;

// kreaira novi prazni rjecnik
Dictionary create();

// dodaje rijec ili uvecava broj pojavljivanja rijeci u rjecniku
// rijeci se dodaju u abecednom redu
void add(Dictionary dict, char *str);

// ispisuje sve rijeci i broj pojavljivanja svake rijeci
void print(Dictionary dict);

// briše cijeli rjeènik
void destroy(Dictionary dict);
int filter(Word *w);
Dictionary filterDictionary(Dictionary indict, int (*filter)(Word *w));
#endif



DICTIONARY.C:

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "dictionary.h"

Dictionary create()
{
    Dictionary dictHead;
    dictHead=(Word*)malloc(sizeof(Word));
    dictHead->word=NULL;
    dictHead->next=NULL;
    return dictHead;
}

void add(Dictionary dict,char* str)
{
    Word* novi=(Word*)malloc(sizeof(Word));
    Word* temp=dict;

    char* novar=strdup(str);
    novi->word=novar;
    novi->count=1;
    while(temp->next != NULL)
    {
        if(strcmp(novi->word,temp->next->word)==0)
        {
            temp->next->count += novi->count;
            return;
        }
        if(strcmp(novi->word,temp->next->word)<0)
        {
            novi->next=temp->next;
            temp->next=novi;
            return;

        }
        temp=temp->next;
    }
    novi->next=NULL;
    temp->next=novi;
}

void print(Dictionary dict)
{
    Dictionary temp=dict->next;
    while(temp != NULL)
    {
        printf("%s=%d puta\n",temp->word,temp->count);
        temp=temp->next;
    }
}

void destroy(Dictionary dict)
{
   while(dict != NULL)
   {
       Word* temp=dict;
       dict=dict->next;
       free(temp);

   }
}
int filter(Word *w)
{
    if(((w->count)>5) && ((w->count)<11) && (strlen(w->word)>3))
        return 1;
    else
        return 0;
}
Dictionary filterDictionary(Dictionary indict, int (*filter)(Word *w))
{
    Word* temp=indict;
    while(temp->next != NULL)
    {
        if(filter(temp->next)==1)
            temp=temp->next;
        else
        {
            Word* brisi=temp->next;
            temp->next=brisi->next;
            free(brisi);
        }
    }
    return indict;
}
